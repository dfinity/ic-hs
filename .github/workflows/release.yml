name: Test and publish

on:
  push:
     branches: [ master ]
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os:
        - ubuntu-latest

        # TODO: nixbuild.net currently does not have x86_64-darwin nor aarch64-darwin support but they're working on it:
        #
        # | I do have another question: do you support x86_64-darwin builds and
        # | ideally aarch64-darwin as well (I just got a new M1 MacBook)?
        #
        # Our long-term goal is to support x86_64-darwin and aarch64-darwin, but
        # we don't do it today. The reason is that we really like all builds to
        # run inside our virtualized sandbox (with our own virtual file system),
        # since it gives us full control and also lots of insights about the
        # builds. We have not yet ported this sandbox to MacOS, but it is
        # definitely something we want to do.
        #
        # We actually _have_ aarch64-darwin machines in our build cluster,
        # running build sandboxes for aarch64-linux. We use a mix of Hetzner
        # instances (https://www.hetzner.com/dedicated-rootserver/mac-mini-m1)
        # and self-hosted M1 machines for this. The aarch64-linux support is EA
        # in nixbuild.net, so we are still experimenting a bit.
        #
        # - macos-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      SSH_KEY_FOR_NIXBUILD: secrets.SSH_KEY_FOR_NIXBUILD
    steps:
    - uses: actions/checkout@v2
    - uses: nixbuild/nix-quick-install-action@v13
      with:
        nix_conf: experimental-features = nix-command
    - name: Configure Nix to use nixbuild.net as a remote builder
      if: env.SSH_KEY_FOR_NIXBUILD != ''
      uses: nixbuild/nixbuild-action@v10
      with:
        nixbuild_ssh_key: ${{ secrets.SSH_KEY_FOR_NIXBUILD }}
    - run: nix-env -iA nix-build-uncached -f nix/
    - uses: cachix/cachix-action@v10
      with:
        name: ic-hs-test
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    # until https://github.com/cachix/cachix-action/issues/86 is fixed:
    - run: cachix watch-store ic-hs-test &

    # run a few targets explicitly, to get easier signal in the CI view
    - run: nix-build-uncached -A universal-canister
    - run: nix-build-uncached -A ic-hs
    - run: nix-build-uncached -A ic-hs-coverage
    - run: nix-build-uncached -A coverage
    - run: nix-build-uncached -A check-generated
    - run: nix-build-uncached -A ic-ref-dist
    - run: nix-build-uncached -A ic-ref-test
    - run: nix-build-uncached -A ic-hs-shell
    - run: nix-build-uncached -A check-cabal-freeze
    # now the rest
    - run: nix-build-uncached

  release:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            nix-system: x86_64-linux
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: nixbuild/nix-quick-install-action@v13
    - uses: nixbuild/nixbuild-action@v10
      with:
        nixbuild_ssh_key: ${{ secrets.SSH_KEY_FOR_NIXBUILD }}
    - uses: cachix/cachix-action@v10
      with:
        name: ic-hs-test
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix-env -f 'channel:nixos-21.05' -iA awscli

    - id: get_version
      run: |
        ver="$(grep '^version' ic-hs.cabal | tr -s ' ' | cut -d' ' -f2)"
        echo "::set-output name=version::$ver"

    - id: buildit
      run: |
        out_path="$(nix-build -A ic-ref-dist)"
        echo "::set-output name=out::$out_path"

    - run: |
        tar -C "${{ steps.buildit.outputs.out }}/bin" -czvf ic-ref.tar.gz .

        ref_short="$(echo "$GITHUB_SHA" | cut -c1-8)"
        version="${{ steps.get_version.outputs.version }}-$ref_short"

        aws s3 cp ic-ref.tar.gz "s3://dfinity-download/ic-ref/ic-ref-$version-$SYSTEM.tar.gz"
      env:
        SYSTEM: ${{ matrix.nix-system }}
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_KEY }}'
