name: Test and publish

on:
  push:
     branches: [ master ]
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - macos-latest
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      SSH_KEY_FOR_NIXBUILD: ${{ secrets.SSH_KEY_FOR_NIXBUILD }}
    steps:
    - uses: actions/checkout@v3
    - if: matrix.os == 'macos-latest'
      uses: cachix/install-nix-action@v19
    - if: matrix.os == 'ubuntu-latest'
      uses: nixbuild/nix-quick-install-action@v21
      with:
        nix_conf: experimental-features = nix-command
    - if: matrix.os == 'ubuntu-latest' && env.SSH_KEY_FOR_NIXBUILD != ''
      uses: nixbuild/nixbuild-action@v15
      with:
        nixbuild_ssh_key: ${{ secrets.SSH_KEY_FOR_NIXBUILD }}
    - uses: cachix/cachix-action@v12
      with:
        name: ic-hs-test
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    # until https://github.com/cachix/cachix-action/issues/86 is fixed:
    - run: cachix watch-store ic-hs-test &
    - run: nix-instantiate

    # Use Remote Store Builds.
    # See: https://blog.nixbuild.net/posts/2022-03-16-lightning-fast-ci-with-nixbuild-net.html
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link universal-canister
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link ic-hs
    - if: matrix.os == 'ubuntu-latest'
      run: cp -r "$(nix-build -A ic-hs.doc)"/share/doc/*/html gh-page
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link ic-hs-coverage
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link coverage
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link check-generated
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link ic-ref-dist
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link ic-ref-test
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link ic-hs-shell
    - if: matrix.os == 'ubuntu-latest'
      run: nix build -f default.nix --eval-store auto --store ssh-ng://eu.nixbuild.net --no-link license-check

    - if: matrix.os == 'macos-latest'
      run: nix-env -iA nix-build-uncached -f nix/
    - if: matrix.os == 'macos-latest'
      run: nix-build-uncached -A universal-canister
    - if: matrix.os == 'macos-latest'
      run: nix-build-uncached -A ic-hs
    - if: matrix.os == 'macos-latest'
      run: nix-build-uncached -A check-generated
    - if: matrix.os == 'macos-latest'
      run: nix-build-uncached -A ic-ref-dist
    - if: matrix.os == 'macos-latest'
      run: nix-build-uncached -A ic-hs-shell
    - if: matrix.os == 'macos-latest'
      run: nix-build-uncached -A license-check

  release:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            nix-system: x86_64-linux
          - os: macos-latest
            nix-system: x86_64-darwin
    runs-on: ${{ matrix.os }}
    env:
      SSH_KEY_FOR_NIXBUILD: ${{ secrets.SSH_KEY_FOR_NIXBUILD }}
    steps:
    - uses: actions/checkout@v3
    - if: matrix.os == 'macos-latest'
      uses: cachix/install-nix-action@v19
    - if: matrix.os == 'ubuntu-latest'
      uses: nixbuild/nix-quick-install-action@v21
      with:
        nix_conf: experimental-features = nix-command
    - if: matrix.os == 'ubuntu-latest' && env.SSH_KEY_FOR_NIXBUILD != ''
      uses: nixbuild/nixbuild-action@v15
      with:
        nixbuild_ssh_key: ${{ secrets.SSH_KEY_FOR_NIXBUILD }}
    - uses: cachix/cachix-action@v12
      with:
        name: ic-hs-test
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix-env -f 'channel:nixos-22.11' -iA awscli

    - id: get_version
      run: |
        ver="$(grep '^version' ic-hs.cabal | tr -s ' ' | cut -d' ' -f2)"
        echo "::set-output name=version::$ver"

    - id: buildit
      run: |
        out_path="$(nix-build -A ic-ref-dist)"
        echo "::set-output name=out::$out_path"

    - run: |
        if [[ -d "${{ steps.buildit.outputs.out }}/build/libs" ]]
        then
          tar -C "${{ steps.buildit.outputs.out }}/build" -czvf ic-ref.tar.gz ic-ref libs
          tar -C "${{ steps.buildit.outputs.out }}" -czvf ic-ref-test.tar.gz build/ic-ref-test build/libs test-data
        else
          tar -C "${{ steps.buildit.outputs.out }}/build" -czvf ic-ref.tar.gz ic-ref
          tar -C "${{ steps.buildit.outputs.out }}" -czvf ic-ref-test.tar.gz build/ic-ref-test test-data
        fi

        ref_short="$(echo "$GITHUB_SHA" | cut -c1-8)"
        version="${{ steps.get_version.outputs.version }}-$ref_short"

        aws s3 cp ic-ref.tar.gz "s3://dfinity-download/ic-ref/ic-ref-$version-$SYSTEM.tar.gz"
        aws s3 cp ic-ref-test.tar.gz "s3://dfinity-download/ic-ref/ic-ref-test-$version-$SYSTEM.tar.gz"
      env:
        SYSTEM: ${{ matrix.nix-system }}
        AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY }}'
        AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_KEY }}'

    - if: matrix.os == 'ubuntu-latest'
      run: cp -r "$(nix-build -A ic-hs.doc)"/share/doc/*/html gh-page
    - if: matrix.os == 'ubuntu-latest'
      name: Deploy to Github Pages
      uses: JamesIves/github-pages-deploy-action@v4.4.1
      with:
        BRANCH: gh-pages
        FOLDER: gh-page
        SINGLE-COMMIT: true
